generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(cuid())
  email                String           @unique
  name                 String
  password             String?
  role                 UserRole         @default(DISPATCHER)
  isActive             Boolean          @default(true)
  createdAt            DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime         @updatedAt @db.Timestamptz(6)
  lastLogin            DateTime?        @db.Timestamptz(6)
  accounts             Account[]
  auditLogs            AuditLog[]
  charterRequests      CharterRequest[] @relation("CharterRequestCreator")
  fixedContracts       FixedContract[]  @relation("FixedContractCreator")
  rate_masters         rate_masters[]
  sessions             Session[]
  confirmedSettlements Settlement[]     @relation("SettlementConfirmer")
  settlements          Settlement[]     @relation("SettlementCreator")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Driver {
  id                                      String           @id @default(cuid())
  name                                    String
  phone                                   String
  businessNumber                          String?
  bankName                                String?
  accountNumber                           String?
  remarks                                 String?
  isActive                                Boolean          @default(true)
  createdAt                               DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                               DateTime         @updatedAt @db.Timestamptz(6)
  vehicleNumber                           String
  businessName                            String?
  representative                          String?
  charterRequests                         CharterRequest[] @relation("CharterRequestDriver")
  fixedContracts                          FixedContract[]  @relation("FixedContractDriver")
  routeTemplates                          RouteTemplate[]  @relation("RouteDefaultDriver")
  settlements                             Settlement[]     @relation("DriverSettlements")
  trips_trips_driverIdTodrivers           trips[]          @relation("trips_driverIdTodrivers")
  trips_trips_substituteDriverIdTodrivers trips[]          @relation("trips_substituteDriverIdTodrivers")

  @@unique([name, phone, vehicleNumber], name: "unique_driver_info")
  @@index([name])
  @@index([phone])
  @@index([vehicleNumber])
  @@index([isActive])
  @@index([name, phone, vehicleNumber], map: "idx_driver_composite")
  @@map("drivers")
}

model LoadingPoint {
  id               String           @id @default(cuid())
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime         @updatedAt @db.Timestamptz(6)
  centerName       String
  loadingPointName String
  lotAddress       String?
  roadAddress      String?
  manager1         String?
  manager2         String?
  phone1           String?
  phone2           String?
  remarks          String?
  charterRequests  CharterRequest[] @relation("CharterRequestCenter")
  fixedContracts   FixedContract[]  @relation("FixedContractLoadingPoint")
  routeTemplates   RouteTemplate[]
  trips            trips[]

  @@index([centerName])
  @@index([loadingPointName])
  @@index([isActive])
  @@map("loading_points")
}

model RouteTemplate {
  id              String        @id @default(cuid())
  name            String        @unique
  loadingPoint    String
  distance        Float?
  driverFare      Decimal       @db.Decimal(12, 2)
  billingFare     Decimal       @db.Decimal(12, 2)
  weekdayPattern  Int[]
  defaultDriverId String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(6)
  loadingPointId  String?
  defaultDriver   Driver?       @relation("RouteDefaultDriver", fields: [defaultDriverId], references: [id])
  loadingPointRef LoadingPoint? @relation(fields: [loadingPointId], references: [id])

  @@index([name])
  @@index([loadingPoint])
  @@index([loadingPointId])
  @@index([defaultDriverId])
  @@index([isActive])
  @@map("route_templates")
}

model Settlement {
  id              String           @id @default(cuid())
  yearMonth       String
  driverId        String
  status          SettlementStatus @default(DRAFT)
  totalTrips      Int              @default(0)
  totalBaseFare   Decimal          @default(0) @db.Decimal(12, 2)
  totalDeductions Decimal          @default(0) @db.Decimal(12, 2)
  totalAdditions  Decimal          @default(0) @db.Decimal(12, 2)
  finalAmount     Decimal          @default(0) @db.Decimal(12, 2)
  confirmedAt     DateTime?        @db.Timestamptz(6)
  confirmedBy     String?
  paidAt          DateTime?        @db.Timestamptz(6)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6)
  createdBy       String?
  items           SettlementItem[]
  confirmer       User?            @relation("SettlementConfirmer", fields: [confirmedBy], references: [id])
  creator         User?            @relation("SettlementCreator", fields: [createdBy], references: [id])
  driver          Driver           @relation("DriverSettlements", fields: [driverId], references: [id], onDelete: Cascade)

  @@unique([driverId, yearMonth], name: "unique_driver_yearmonth")
  @@index([yearMonth, status])
  @@index([driverId, status])
  @@index([status, confirmedAt])
  @@map("settlements")
}

model SettlementItem {
  id           String             @id @default(cuid())
  settlementId String
  tripId       String?
  type         SettlementItemType
  description  String
  amount       Decimal            @db.Decimal(12, 2)
  date         DateTime           @db.Date
  createdAt    DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime           @updatedAt @db.Timestamptz(6)
  settlement   Settlement         @relation(fields: [settlementId], references: [id], onDelete: Cascade)
  trips        trips?             @relation(fields: [tripId], references: [id])

  @@index([settlementId, type])
  @@index([date])
  @@index([tripId])
  @@map("settlement_items")
}

model AuditLog {
  id         String      @id @default(cuid())
  userId     String?
  userName   String
  action     AuditAction
  entityType String
  entityId   String
  changes    Json?
  metadata   Json?
  createdAt  DateTime    @default(now()) @db.Timestamptz(6)
  user       User?       @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([action, createdAt])
  @@index([createdAt])
  @@map("audit_logs")
}

model RegionAlias {
  id             String   @id @default(cuid())
  rawText        String   @unique
  normalizedText String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  @@index([normalizedText])
  @@index([rawText])
  @@map("region_aliases")
}

model FixedContract {
  id                 String        @id @default(cuid())
  driverId           String?
  loadingPointId     String
  routeName          String
  centerContractType ContractType
  driverContractType ContractType?
  centerAmount       Decimal       @db.Decimal(12, 2)
  driverAmount       Decimal?      @db.Decimal(12, 2)
  operatingDays      Int[]
  startDate          DateTime?     @db.Date
  specialConditions  String?
  remarks            String?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime      @updatedAt @db.Timestamptz(6)
  createdBy          String?
  endDate            DateTime?     @db.Date
  creator            User?         @relation("FixedContractCreator", fields: [createdBy], references: [id])
  driver             Driver?       @relation("FixedContractDriver", fields: [driverId], references: [id])
  loadingPoint       LoadingPoint  @relation("FixedContractLoadingPoint", fields: [loadingPointId], references: [id])

  @@unique([loadingPointId, routeName], name: "unique_center_route")
  @@index([driverId, isActive])
  @@index([loadingPointId, isActive])
  @@index([centerContractType])
  @@index([driverContractType])
  @@map("fixed_contracts")
}

model CenterFare {
  id             String   @id @default(cuid())
  centerName     String
  vehicleType    String
  region         String?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)
  fareType       FareType
  baseFare       Int?
  extraStopFee   Int?
  extraRegionFee Int?

  @@unique([centerName, vehicleType, region], name: "unique_center_vehicle_region")
  @@index([centerName, vehicleType])
  @@index([region])
  @@map("center_fares")
}

model CharterRequest {
  id             String               @id @default(cuid())
  centerId       String
  vehicleType    String
  date           DateTime             @db.Date
  isNegotiated   Boolean              @default(false)
  negotiatedFare Int?
  baseFare       Int?
  regionFare     Int?
  stopFare       Int?
  extraFare      Int?
  totalFare      Int
  driverId       String
  driverFare     Int
  notes          String?
  createdAt      DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime             @updatedAt @db.Timestamptz(6)
  createdBy      String?
  destinations   CharterDestination[]
  center         LoadingPoint         @relation("CharterRequestCenter", fields: [centerId], references: [id])
  creator        User?                @relation("CharterRequestCreator", fields: [createdBy], references: [id])
  driver         Driver               @relation("CharterRequestDriver", fields: [driverId], references: [id])

  @@index([centerId, date])
  @@index([driverId, date])
  @@index([vehicleType])
  @@index([date])
  @@index([createdAt])
  @@map("charter_requests")
}

model CharterDestination {
  id        String         @id @default(cuid())
  requestId String
  region    String
  order     Int
  request   CharterRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@unique([requestId, order], name: "unique_request_order")
  @@index([requestId])
  @@map("charter_destinations")
}

model rate_addons {
  id          String   @id
  centerName  String
  tonnage     String
  perStop     Int
  perWaypoint Int
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @db.Timestamptz(6)

  @@unique([centerName, tonnage])
  @@index([centerName, tonnage], map: "rate_addons_center_tonnage_idx")
}

model rate_bases {
  id         String   @id
  centerName String
  tonnage    String
  region     String
  baseFare   Int
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)

  @@unique([centerName, tonnage, region])
  @@index([centerName, tonnage], map: "rate_base_center_tonnage_idx")
}

model rate_details {
  id           String         @id
  rateMasterId String
  type         RateDetailType
  region       String?
  amount       Decimal        @db.Decimal(12, 2)
  conditions   String?
  validFrom    DateTime?      @db.Timestamptz(6)
  validTo      DateTime?      @db.Timestamptz(6)
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @db.Timestamptz(6)
  rate_masters rate_masters   @relation(fields: [rateMasterId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([rateMasterId, type])
  @@index([region])
  @@index([validFrom, validTo])
}

model rate_masters {
  id           String         @id
  centerName   String
  tonnage      Float
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @db.Timestamptz(6)
  createdBy    String?
  rate_details rate_details[]
  users        User?          @relation(fields: [createdBy], references: [id])

  @@unique([centerName, tonnage])
  @@index([centerName])
  @@index([isActive])
  @@index([tonnage])
}

model trips {
  id                                        String           @id
  date                                      DateTime         @db.Date
  driverId                                  String?
  centerId                                  String?
  routeType                                 String           @default("charter")
  status                                    TripStatus       @default(SCHEDULED)
  driverFare                                Decimal          @db.Decimal(12, 2)
  billingFare                               Decimal          @db.Decimal(12, 2)
  absenceReason                             String?
  deductionAmount                           Decimal?         @db.Decimal(12, 2)
  substituteDriverId                        String?
  substituteFare                            Decimal?         @db.Decimal(12, 2)
  remarks                                   String?
  createdAt                                 DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                 DateTime         @db.Timestamptz(6)
  createdBy                                 String?
  centerName                                String?
  tonnage                                   String?
  vendor                                    String?
  regions                                   String[]
  totalStops                                Int?
  driverName                                String?
  vehicleNumber                             String?
  contact                                   String?
  requester                                 String?
  baseFare                                  Int?
  callFee                                   Int?
  waypointFee                               Int?
  extraFee                                  Int?
  totalFare                                 Int?
  extraReason                               String?
  charterCost                               Int?
  settlement_items                          SettlementItem[]
  loading_points                            LoadingPoint?    @relation(fields: [centerId], references: [id])
  drivers_trips_driverIdTodrivers           Driver?          @relation("trips_driverIdTodrivers", fields: [driverId], references: [id])
  drivers_trips_substituteDriverIdTodrivers Driver?          @relation("trips_substituteDriverIdTodrivers", fields: [substituteDriverId], references: [id])

  @@index([centerId, date])
  @@index([centerName, tonnage])
  @@index([date, status])
  @@index([driverId, date])
  @@index([substituteDriverId])
}

enum SettlementStatus {
  DRAFT
  CONFIRMED
  PAID
}

enum UserRole {
  ADMIN
  DISPATCHER
  ACCOUNTANT
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  IMPORT
  EXPORT
  CONFIRM
  ACTIVATE
  DEACTIVATE
  LOGIN
  LOGOUT
}

enum ContractType {
  FIXED_DAILY
  FIXED_MONTHLY
  CONSIGNED_MONTHLY
  CHARTER_PER_RIDE
}

enum FareType {
  BASIC
  STOP_FEE
}

enum SettlementItemType {
  TRIP
  DEDUCTION
  ADDITION
  ADJUSTMENT
}

enum RateDetailType {
  BASE
  CALL_FEE
  WAYPOINT_FEE
  SPECIAL
}

enum TripStatus {
  SCHEDULED
  COMPLETED
  ABSENCE
  SUBSTITUTE
}
