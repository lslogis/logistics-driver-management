generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(cuid())
  email                String       @unique
  name                 String
  password             String?
  role                 UserRole     @default(DISPATCHER)
  isActive             Boolean      @default(true)
  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @updatedAt @db.Timestamptz(6)
  lastLogin            DateTime?    @db.Timestamptz(6)
  accounts             Account[]
  auditLogs            AuditLog[]
  sessions             Session[]
  confirmedSettlements Settlement[] @relation("SettlementConfirmer")
  settlements          Settlement[] @relation("SettlementCreator")
  createdFixedContracts FixedContract[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Driver {
  id             String          @id @default(cuid())
  name           String
  phone          String
  businessNumber String?
  bankName       String?
  accountNumber  String?
  remarks        String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt @db.Timestamptz(6)
  vehicleNumber  String
  businessName   String?
  representative String?
  settlements    Settlement[]    @relation("DriverSettlements")
  dispatches     Dispatch[]
  fixedContracts FixedContract[]

  @@index([name])
  @@index([phone])
  @@index([vehicleNumber])
  @@index([isActive])
  @@map("drivers")
}

model LoadingPoint {
  id               String          @id @default(cuid())
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime        @updatedAt @db.Timestamptz(6)
  centerName       String
  loadingPointName String
  lotAddress       String?
  roadAddress      String?
  manager1         String?
  manager2         String?
  phone1           String?
  phone2           String?
  remarks          String?
  centerFares      CenterFare[]    @relation("LoadingPointCenterFares")
  requests         Request[]
  fixedContracts   FixedContract[]

  @@unique([centerName])
  @@index([centerName])
  @@index([loadingPointName])
  @@index([isActive])
  @@map("loading_points")
}


model Settlement {
  id              String           @id @default(cuid())
  yearMonth       String
  driverId        String
  status          SettlementStatus @default(DRAFT)
  totalTrips      Int              @default(0)
  totalBaseFare   Decimal          @default(0) @db.Decimal(12, 2)
  totalDeductions Decimal          @default(0) @db.Decimal(12, 2)
  totalAdditions  Decimal          @default(0) @db.Decimal(12, 2)
  finalAmount     Decimal          @default(0) @db.Decimal(12, 2)
  confirmedAt     DateTime?        @db.Timestamptz(6)
  confirmedBy     String?
  paidAt          DateTime?        @db.Timestamptz(6)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6)
  createdBy       String?
  items           SettlementItem[]
  confirmer       User?            @relation("SettlementConfirmer", fields: [confirmedBy], references: [id])
  creator         User?            @relation("SettlementCreator", fields: [createdBy], references: [id])
  driver          Driver           @relation("DriverSettlements", fields: [driverId], references: [id], onDelete: Cascade)

  @@unique([driverId, yearMonth], name: "unique_driver_yearmonth")
  @@index([yearMonth, status])
  @@index([driverId, status])
  @@index([status, confirmedAt])
  @@map("settlements")
}

model SettlementItem {
  id           String             @id @default(cuid())
  settlementId String
  type         SettlementItemType
  description  String
  amount       Decimal            @db.Decimal(12, 2)
  date         DateTime           @db.Date
  createdAt    DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime           @updatedAt @db.Timestamptz(6)
  settlement   Settlement         @relation(fields: [settlementId], references: [id], onDelete: Cascade)

  @@index([settlementId, type])
  @@index([date])
  @@map("settlement_items")
}

model AuditLog {
  id         String      @id @default(cuid())
  userId     String?
  userName   String
  action     AuditAction
  entityType String
  entityId   String
  changes    Json?
  metadata   Json?
  createdAt  DateTime    @default(now()) @db.Timestamptz(6)
  user       User?       @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([action, createdAt])
  @@index([createdAt])
  @@map("audit_logs")
}

model RegionAlias {
  id             String   @id @default(cuid())
  rawText        String   @unique
  normalizedText String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  @@index([normalizedText])
  @@index([rawText])
  @@map("region_aliases")
}

model FixedContract {
  id                 String        @id @default(cuid())
  driverId           String?
  loadingPointId     String
  routeName          String
  centerContractType ContractType
  driverContractType ContractType?
  centerAmount       Decimal       @db.Decimal(12, 2)
  driverAmount       Decimal?      @db.Decimal(12, 2)
  operatingDays      Int[]
  startDate          DateTime?     @db.Date
  specialConditions  String?
  remarks            String?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime      @updatedAt @db.Timestamptz(6)
  createdBy          String?
  endDate            DateTime?     @db.Date
  driver             Driver?       @relation(fields: [driverId], references: [id])
  loadingPoint       LoadingPoint  @relation(fields: [loadingPointId], references: [id])
  creator            User?         @relation(fields: [createdBy], references: [id])

  @@unique([loadingPointId, routeName], name: "unique_center_route")
  @@index([driverId, isActive])
  @@index([loadingPointId, isActive])
  @@index([centerContractType])
  @@index([driverContractType])
  @@map("fixed_contracts")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model CenterFare {
  id             String       @id @default(cuid())
  loadingPointId String
  vehicleType    String
  fareType       FareType
  baseFare       Int?
  extraStopFee   Int?
  extraRegionFee Int?
  region         String?
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(6)
  loadingPoint   LoadingPoint @relation("LoadingPointCenterFares", fields: [loadingPointId], references: [id], onDelete: Cascade)

  @@index([loadingPointId, vehicleType, fareType])
  @@index([region])
  @@map("center_fares")
}


model Request {
  id               String       @id @default(cuid())
  requestDate      DateTime     @db.Date
  centerCarNo      String       @db.VarChar(50)
  vehicleTon       Decimal      @db.Decimal(3, 1)
  regions          Json
  stops            Int
  notes            String?
  baseFare         Int?
  extraStopFee     Int?
  extraRegionFee   Int?
  extraAdjustment  Int          @default(0)
  adjustmentReason String?
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(6)
  createdBy        String?
  loadingPointId   String?
  loadingPoint     LoadingPoint? @relation(fields: [loadingPointId], references: [id])
  dispatches       Dispatch[]

  @@index([loadingPointId])
  @@index([requestDate, centerCarNo])
  @@index([requestDate])
  @@index([centerCarNo])
  @@index([createdAt])
  @@map("requests")
}

model Dispatch {
  id            String   @id @default(cuid())
  requestId     String
  request       Request  @relation(fields: [requestId], references: [id])
  driverId      String?
  driver        Driver?  @relation(fields: [driverId], references: [id])
  driverName    String
  driverPhone   String
  driverVehicle String
  deliveryTime  String?
  driverFee     Int
  driverNotes   String?
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)

  @@index([requestId])
  @@index([driverId])
  @@index([requestId, driverId])
  @@index([createdAt])
  @@map("dispatches")
}

model CharterRequest {
  id             String   @id @default(cuid())
  centerId       String
  vehicleType    String
  date           DateTime @db.Date
  isNegotiated   Boolean  @default(false)
  negotiatedFare Int?
  baseFare       Int?
  regionFare     Int?
  stopFare       Int?
  extraFare      Int?
  totalFare      Int
  driverId       String
  driverFare     Int
  notes          String?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)
  createdBy      String?

  @@index([centerId, date])
  @@index([driverId, date])
  @@index([vehicleType])
  @@index([date])
  @@index([createdAt])
  @@map("charter_requests")
}

model CharterDestination {
  id        String @id @default(cuid())
  requestId String
  region    String
  order     Int

  @@unique([requestId, order], name: "unique_request_order")
  @@index([requestId])
  @@map("charter_destinations")
}

enum SettlementStatus {
  DRAFT
  CONFIRMED
  PAID
}

enum UserRole {
  ADMIN
  DISPATCHER
  ACCOUNTANT
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  IMPORT
  EXPORT
  CONFIRM
  LOGIN
  LOGOUT
  ACTIVATE
  DEACTIVATE
}

enum ContractType {
  FIXED_DAILY
  FIXED_MONTHLY
  CONSIGNED_MONTHLY
  CHARTER_PER_RIDE
}

enum FareType {
  BASIC
  STOP_FEE
}

enum SettlementItemType {
  TRIP
  DEDUCTION
  ADDITION
  ADJUSTMENT
}
